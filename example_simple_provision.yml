# example_simple_provision.yml
# ----------------------------------------------------------------------------
# This example demonstrates how one might go about using a CloudFormation 
# template to provision EC2 instances, then run an Ansible playbook on the
# newly-provisioned EC2 instance.
# ----------------------------------------------------------------------------

- hosts: localhost
  connection: local
  gather_facts: False

  tasks:

    - name: Create the CloudFormation stack
      cloudformation:
        stack_name: "{{param_stack_name}}"
        state: "present"
        region: "us-east-1"
        disable_rollback: true
        template: "cloudformation-examples/example-linux-ec2.yml"
        template_parameters:
          pInstanceProfile: "{{param_instance_profile}}"
          pApplicationName: "{{param_application_name}}"
          pSshKeyName: "{{param_ssh_key_name}}"
          pInstanceSize: "{{param_instance_size}}"
          pEC2SecurityGroupIds: "{{param_ec2_security_group_ids}}"
          pLinuxType: "{{param_linux_type}}"
          pSubnetId: "{{param_subnet_id}}"
          pEC2InstanceName: "{{param_ec2_instance_name}}"
        tags:
          Stack: "{{param_stack_name}}"
          CreatedBy: "Ansible Tower ({{ansible_version}}) at {{ansible_host}} "
      register: cfn


    - name: Add public IPs to host group
      add_host: hostname={{ cfn.stack_outputs['InstancePrivateIPAddress'] }} groups=ec2hosts

    - name: Debug
      debug: var=ansible_facts

    - name: Waiting...
      pause:
        seconds: 30

# ----------------------------------------------------------------------------
# Now apply the following steps to the hosts that were created in the previous
# stack.
# ----------------------------------------------------------------------------
- hosts: ec2hosts
  name: Configure
  user: ec2-user
  gather_facts: true
  become_method: sudo
  retries: 3
  timeout: 20
  # vars:
  #   ansible_ssh_private_key_file: "{{aws_ssh_key}}"

  tasks:
    - name: Install web server
      become: yes
      yum:
        name:
        - httpd
        - java-1.8.0-openjdk
        state: present

    - name: Create wildfly group
      group:
        name: wildfly
        state: present
      become: yes

    - name: Create wildfly user
      user:
        name: wildfly
        comment: Wildfly Service Account
        group: wildfly
        state: present
        shell: /bin/nologin
        home: /opt/wildfly
      become: yes

    - name: Download Wildfly server
      unarchive:
        src: https://download.jboss.org/wildfly/16.0.0.Final/wildfly-16.0.0.Final.tar.gz
        dest: /opt/wildfly
        remote_src: yes
        owner: wildfly
        group: wildfly
        extra_opts:
          - "--strip"
          - "1"
      become: yes

    - name: Create log directory
      file:
        path: /opt/wildfly/standalone/logs
        state: directory
        mode: 0755
        owner: wildfly
        group: wildfly
      become: yes

    - name: Start Wildfly server
      shell: "nohup /opt/wildfly/bin/standalone.sh -b=0.0.0.0 -bmanagement=0.0.0.0 > /opt/wildfly/standalone/logs/wildfly-cmd-out.log 2>&1 &"
      poll: 0
      become: yes
